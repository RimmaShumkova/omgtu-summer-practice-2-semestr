#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №9. Реализация длительных операций.

**Цель:** Предоставить возможность выполннеия команд, для полного завершения которых требуется более одного вызова Execute.

**Результаты:** После выполнения работы Вы сможете:
1. Выполнять длительные опреации в отдельном потоке без монопольного использования потока в течение длительного времени.
3. Прерывать выполнение таких команд. 


## Задание.
Если для полного выполнения командв потребуется более одного вызова Execute, необходимо такую команду добавить в планировщик.

Для иллюстрации выполнненой работы определить команду

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using System.Threading;

interface ICommand
{
    void Execute();
}

public class TestCommand(int id) : ICommand
{
    int counter = 0;

    public void Execute()
    {
        Console.WriteLine($"Поток {id} вызов {++counter}");
    }
}

public class CommandScheduler
{
    BlockingCollection<TestCommand> commandQueue = new BlockingCollection<TestCommand>();
    Task runTask;
    bool isRunning = true;
    bool isSoftStopping = false;

    public void AddCommand(TestCommand command)
    {
        commandQueue.Add(command); //добавляем команду в очередь
    }

    public void Start()
    {
        runTask = Task.Factory.StartNew(() =>
        {
            foreach (var command in commandQueue.GetConsumingEnumerable())
            {
                if (!isRunning) break;
                command.Execute(); //выполнение команды
            }
        });
    }

    public void HardStop()
    {
        isRunning = false; //прекращаем выполнение команд
        commandQueue.CompleteAdding(); //завершаем добавление команд

        if (runTask != null && !runTask.IsCompleted)
        {
            runTask.Wait();
        }

        Console.WriteLine("\nПоток остановлен с помощью HardStop");

        //проверяем выполнение всех команд
        if (commandQueue.Count == 0)
        {
            Console.WriteLine("Все команды успешно выполнены");
        }
        else
        {
            Console.WriteLine("Не все команды были выполнены");
        }
    }

    public void SoftStop()
    {
        isSoftStopping = true;
        commandQueue.CompleteAdding();

        if (runTask != null && !runTask.IsCompleted)
        {
            runTask.Wait();
        }

        Console.WriteLine("\nПоток остановлен с помощью SoftStop");

        if (commandQueue.Count == 0)
        {
            Console.WriteLine("Все команды успешно выполнены");
        }
        else
        {
            Console.WriteLine("Не все команды были выполнены");
        }
    }
}

#!csharp

CommandScheduler scheduler = new CommandScheduler();

//добавляем команды в планировщик
for (int i = 1; i <= 5; i++)
{
    TestCommand testCommand = new TestCommand(i);
    
    for (int j = 0; j < 3; j++) //каждую команду выполняем 3 раза
    {
        scheduler.AddCommand(testCommand);
    }
}

scheduler.Start();
Thread.Sleep(10);
scheduler.HardStop();

#!markdown

Необходимо проиллюстрировать выполнение 5 экземпляров TestCommand 3 раза, затем остановить поток с помощью HardStop.
