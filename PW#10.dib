#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №10. Доставка сообщений до Команды.

**Цель:** Предоставить возможность обмена данными для длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Отправлять сообщения длительной операции.

## Задание.
Поскольку длительная операция выполняется в течение некоторого момента времени, то может возникнуть необходимость
в предоставлении дополнительной информации, влияющей на ход выполнения. Поскольку Команды и источник данных часто находятся в разных потоках,
то сделать это надо потоко-безопасным образом. Самый простой способ - используя идиому Производитель-Поребитель, в нашем случае - очередь.

Набор данных, предназначенных для Команды будем называть сообщением. Можно использовать любую подходящую конструкцию языка программирования для 
представления сообщения. Необходимо учесть, что скорость доставки сообщений может быть выше, чем скорость обработки, а значит очередь сообщений должна быть
у каждой Длительной операции. При этом потоко-безопасные очереди требуют системных ресурсов, а значит, чтобы не получить ограничение на максимальное количество
одновремнно работающих длительных Команд, нельзя использовать потоко-безопасные очереди. 

Возможный вариант реализации - оставить одну потоко-безопасную очередь для потока, а для Команд использовать обычные очереди. Осталось только решить, как сообщение
излеченное из очереди потока попадет в очередь Команды. Один из возможных вариантов:
1. Каждая команда имеет уникальный идентификатор.
2. Сообщение содержит уникальный идентификатор Команлды, которому оно адресовано.
3. Для потока создаем специальную Длительную Команду, которая назвается Роутером. Он хранит коллекцию пар (id Команды, ссылка на очередь Команды). При вызове метода Execute этой 
Роутера, если очередь потока не пуста, происходит чтение очередного сообщения и по id Команды определяется очередь, куда это сообщение записывается.
Если id Команды не определен, на консоль выводится сообщение о невозможности доставить сообщение неизвестному адресату.
При старте новой Команды, ее очередь необходимо добавить в коллекцию Роутера. При остановке Команды - очередь удаляется из коллекции Роутера.

Продемонстрировать работу Роутера на двух Длительных Командах и на отправке сообщения несуществующей Команде.

**Материалы для самостоятельного изучения**.
1. [Паттерн Сообщение](https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html)
2. [Паттерн Роутер - весь раздел про Роутеры](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageRoutingIntro.html)
3. [Обмен сообщеними](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageConstructionIntro.html)

#!csharp

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;

public class Message
{
    public int commandId { get; } //уникальный идентификатор команды, которой адресовано сообщение
    public string Data { get; } //содержимое сообщения

    public Message(int commId, string data)
    {
        commandId = commId;
        Data = data;
    }
}

public class Command
{
    public int Id { get; }
    Queue<Message> commandQueue = new Queue<Message>();

    public Command(int id)
    {
        Id = id;
    }

    public void EnqueueMessage(Message message)
    {
        commandQueue.Enqueue(message); //добавляем сообщение в очередь
    }

    public void ExecuteMessages()
    {
        if (commandQueue.Count > 0) //проверка на пустоту очереди
        {
            while (commandQueue.Count > 0)
            {
                var message = commandQueue.Dequeue(); //извлекаем сообщение из очереди
                Console.WriteLine($"Команда {Id} обрабатывает полученное сообщение: {message.Data}");
            }
        }
    }
}

public class Router
{
    ConcurrentQueue<Message> commandConcQueue = new ConcurrentQueue<Message>();
    Dictionary<int, Command> commands = new Dictionary<int, Command>(); //инициализируем коллекцию комманд

    public void RegisterCommand(Command command)
    {
        commands[command.Id] = command; //добавляем команду в коллекцию по ее уникальному ID
    }

    public void UnregisterCommand(int commandId)
    {
        commands.Remove(commandId);
    }

    public void EnqueueMessage(Message message)
    {
        commandConcQueue.Enqueue(message);
    }

    //метод для обработки сообщений из общей очереди
    public void Execute()
    {
        if (commandConcQueue.Count > 0)
        {
            while (commandConcQueue.TryDequeue(out var message))
            {
                if (commands.TryGetValue(message.commandId, out var command))
                {
                    command.EnqueueMessage(message);
                }
                else
                {
                    Console.WriteLine($"Неизвестной команде с ID {message.commandId} сообщение не доставлено");
                }
            }
        }
    }
}

#!csharp

var router = new Router();

//создаем и регистрируем комманды
var command1 = new Command(1);
var command2 = new Command(2);
router.RegisterCommand(command1);
router.RegisterCommand(command2);

//отправляем сообщение коммандам
router.EnqueueMessage(new Message(1, "Hello Command 1"));
router.EnqueueMessage(new Message(2, "Hello Command 2"));
router.EnqueueMessage(new Message(3, "Hello Command 3")); //сообщение не придет, т.к команды не существует

router.Execute();

//обрабатываем сообщения и удаляем команды из роутера
command1.ExecuteMessages();
command2.ExecuteMessages();
router.UnregisterCommand(1);
router.UnregisterCommand(2);
