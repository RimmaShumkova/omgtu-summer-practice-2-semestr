#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.

#!csharp

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;

public interface ICommand
{
    void Execute();
    bool IsCompleted { get; }
}

public interface IScheduler
{
    bool HasCommand();
    ICommand Select();
    void Add(ICommand cmd);
}

public class Scheduler : IScheduler
{
    ConcurrentQueue<ICommand> concQueue = new ConcurrentQueue<ICommand>();
    List<ICommand> commands = new List<ICommand>();
    int currentIndex = 0;

    //проверяем наличие команд в очереди или списке
    public bool HasCommand()
    {
        lock (commands)
        {
            return commands.Count > 0 || !concQueue.IsEmpty;
        }
    }

    public ICommand Select()
    {
        lock (commands)
        {
            //переносим команды из очереди в список, если список пуст
            if (commands.Count == 0)
            {
                while (concQueue.TryDequeue(out var queuedCmd))
                {
                    commands.Add(queuedCmd);
                }
            }

            if (commands.Count == 0)
            {
                return null;
            }

            //стратегия Round Robin (циклический выбор команды)
            var selectedCmd = commands[currentIndex];
            currentIndex = (currentIndex + 1) % commands.Count;

            return selectedCmd;
        }
    }

    public void Add(ICommand cmd)
    {
        concQueue.Enqueue(cmd);
    }
}

public class RunThread
{
    IScheduler sched;
    Thread thread;
    bool isRunning;

    public RunThread(IScheduler scheduler)
    {
        sched = scheduler;
        thread = new Thread(Run);
        isRunning = true;
    }

    public void Start()
    {
        thread.Start();
    }

    public void Stop()
    {
        isRunning = false;
        thread.Join();
    }
    
    public bool IsAlive => thread.IsAlive;

    //основной метод работы потока
    private void Run()
    {
        while (isRunning)
        {
            if (sched.HasCommand())
            {
                var cmd = sched.Select();
                cmd?.Execute();

                //возвращаем команду в очередь, если она еще не завершена
                if (cmd is ExampleCommand exampleCmd && !exampleCmd.IsCompleted)
                {
                    sched.Add(cmd);
                }
            }
            else
            {
                Thread.Sleep(10);
            }
        }
    }
}

public class ExampleCommand : ICommand
{
    int remainingExecutions;

    public ExampleCommand(int executions)
    {
        remainingExecutions = executions;
    }

    public void Execute()
    {
        if (remainingExecutions > 0)
        {
            Console.WriteLine("Выполнение команды");
            remainingExecutions--;
        }
    }

    public bool IsCompleted => remainingExecutions == 0;
}

#!csharp

//создаем и передаем планировщик в поток
IScheduler scheduler = new Scheduler();
RunThread runThread = new RunThread(scheduler);

ICommand command1 = new ExampleCommand(3); //3 выполнения
ICommand command2 = new ExampleCommand(2); //2 выполнения
ICommand command3 = new ExampleCommand(1); //1 выполнения

scheduler.Add(command1);
scheduler.Add(command2);
scheduler.Add(command3);

Console.WriteLine("Добавлены тестовые команды в планировщик");

runThread.Start();
Thread.Sleep(100);
runThread.Stop();

Console.WriteLine("Рабочий поток остановлен");

//проверяем выполнение всех команд
bool allCommandsCompleted = ((ExampleCommand)command1).IsCompleted &&
                            ((ExampleCommand)command2).IsCompleted &&
                            ((ExampleCommand)command3).IsCompleted;

if (allCommandsCompleted)
{
    Console.Write("\nВсе команды выполнены");
}
else
{
    Console.Write("\nНе все команды выполнены");
}

//проверяем завершение потока
if (!runThread.IsAlive)
{
    Console.Write(", рабочий поток завершился корректно");
}
else
{
    Console.Write(", рабочий поток не завершился корректно");
}
